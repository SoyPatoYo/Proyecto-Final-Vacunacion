/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import accesoADatos.CentroSaludData;
import accesoADatos.VacunaData;
import entidades.CentroSalud;
import entidades.Vacuna;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Matias
 */
public class CargarVacunasACentro extends javax.swing.JPanel {

    VacunaData vD;
    CentroSaludData csD;
    private DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };

    public CargarVacunasACentro() {
        initComponents();
        tablaCentros.getTableHeader().setReorderingAllowed(false);
        vD = new VacunaData();
        csD = new CentroSaludData();
        cargarCombo();
        armarCabecera();
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCentros = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboVacunas = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setText("Agregar Vacunas a Centro");

        tablaCentros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaCentros);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setText("Seleccione Centro de Salud");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setText("Seleccione tipo de Vacuna");

        jButton1.setText("Agregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(comboVacunas, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(jButton1)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(36, 36, 36)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(comboVacunas, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jButton1)
                .addContainerGap(53, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        CentroSalud centro=new CentroSalud();
        int fila=tablaCentros.getSelectedRow();
        String nombre=tablaCentros.getValueAt(fila, 0).toString();
        List<CentroSalud> centros = csD.buscarCentrosSaludPorNombre(nombre);
        for(CentroSalud cs:centros){
            if(cs.getDireccion().equals(tablaCentros.getValueAt(fila, 1))){
                centro=cs;
            }
        }
        String marca=comboVacunas.getSelectedItem().toString();
        List<Vacuna> vacunas = vD.buscarVacunas();
        Vacuna vacuna=new Vacuna();
        for(Vacuna v:vacunas){
            if(marca.equals(v.getMarcaVacuna())){
                vacuna=v;
                centro.setLaboratorio(v);
            }
        }
        centro.setCantDosis(0);
        System.out.println(centro.getLaboratorio().getLaboratorio());
        
        List<CentroSalud> todosLosCentros=csD.listarCentrosSalud();
        for(CentroSalud cS:todosLosCentros){
            if(cS.getNombre().equals(nombre) && centro.getLaboratorio().getLaboratorio().equals(cS.getLaboratorio().getLaboratorio())){
                JOptionPane.showMessageDialog(this, "Ese Centro de Salud ya tiene ese tipo de vacuna");
                return;
            }
        }
        csD.guardarCentroSalud(centro);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboVacunas;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaCentros;
    // End of variables declaration//GEN-END:variables

    private void cargarCombo() {
        List<Vacuna> listaVacunas = vD.buscarVacunas();

        for (Vacuna v : listaVacunas) {
            comboVacunas.addItem(v.getMarcaVacuna());
        }

    }

    private void armarCabecera() {
        modelo.addColumn("Centro");
        modelo.addColumn("Direccion");

        tablaCentros.setModel(modelo);
        tablaCentros.getColumnModel().getColumn(0).setPreferredWidth(120);
    }

    private void borrarFilas() {
        int filas = tablaCentros.getRowCount() - 1;

        for (int i = filas; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }
    
    private void llenarTabla(){
        List<CentroSalud> centros = csD.listarCentrosSalud();
        
        for(CentroSalud cs:centros){
            if(null==cs.getLaboratorio().getLaboratorio()){
                cargarDatos(cs);
            }
        }
        
    }
    
    private void cargarDatos(CentroSalud centro) {
        modelo.addRow(new Object[]{centro.getNombre(), centro.getDireccion()});
    }
}
